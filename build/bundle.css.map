{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\tconst INF = 1e20\n\tconst width = 10\n\tconst height = 10\n\tlet cells = []\n\tfor(let i = 0; i < height; i++){\n\t\tlet row = []\n\t\tfor(let j = 0; j < width; j++){\n\t\t\tconst occupied = Math.random() < 0.07\n\t\t\trow.push({\n\t\t\t\tvalue: occupied ? 1 : 0,\n\t\t\t\tcleared: false,\n\t\t\t\tdistance: occupied ? INF : 0,\n\t\t\t})\n\t\t}\n\t\tcells.push(row)\n\t}\n\n\t// Code borrowed from: https://github.com/parmanoir/Meijster-distance\n\t// Meijster distance\n\t//\tmethod : 'EDT' (Euclidean) 'MDT' (Manhattan) 'CDT' (Chessboard)\n\t//\tEverything is integer math, hence Math.floor()\n\tfunction distanceFromBooleanImage(booleanImage, m, n, method) {\n\t\t// First phase\n\t\tvar infinity = m+n\n\t\tvar b = booleanImage\n\t\tvar g = new Array(m*n)\n\t\tfor (var x=0; x<m; x++)\t{\n\t\t\tif (b[x+0*m])\n\t\t\t\tg[x+0*m] = 0\n\t\t\telse\n\t\t\t\tg[x+0*m] = infinity\n\t\t\t// Scan 1\n\t\t\tfor (var y=1; y<n; y++)\t{\n\t\t\t\tif (b[x+y*m])\n\t\t\t\t\tg[x+y*m] = 0\n\t\t\t\telse\n\t\t\t\t\tg[x+y*m] = 1 + g[x+(y-1)*m]\n\t\t\t}\n\t\t\t// Scan 2\n\t\t\tfor (var y=n-1; y>= 0; y--)\t{\n\t\t\t\tif (g[x+(y+1)*m] < g[x+y*m])\n\t\t\t\t\tg[x+y*m] = 1 + g[x+(y+1)*m]\n\t\t\t}\n\t\t}\n\n\t\t// Euclidean\n\t\tfunction EDT_f(x, i, g_i) {\t\n\t\t\treturn (x-i)*(x-i) + g_i*g_i\t\n\t\t}\n\t\tfunction EDT_Sep(i, u, g_i, g_u) {\t\n\t\t\treturn Math.floor((u*u - i*i + g_u*g_u - g_i*g_i)/(2*(u-i)))\t\n\t\t}\n\n\t\t// Manhattan\n\t\tfunction MDT_f(x, i, g_i) {\t\n\t\t\treturn Math.abs(x-i) + g_i\t\t\n\t\t}\n\t\tfunction MDT_Sep(i, u, g_i, g_u) {\n\t\t\tif (g_u >= (g_i + u - i))\n\t\t\t\treturn infinity\n\t\t\tif (g_i > (g_u + u - i))\n\t\t\t\treturn -infinity\n\t\t\treturn Math.floor((g_u - g_i + u + i)/2)\n\t\t}\n\n\t\t// Chessboard\n\t\tfunction CDT_f(x, i, g_i) {\t\n\t\t\treturn Math.max(Math.abs(x-i), g_i)\t\n\t\t}\n\t\tfunction CDT_Sep(i, u, g_i, g_u) {\n\t\t\tif (g_i <= g_u)\n\t\t\t\treturn Math.max(i+g_u, Math.floor((i+u)/2))\n\t\t\telse\n\t\t\t\treturn Math.min(u-g_i, Math.floor((i+u)/2))\n\t\t}\n\n\t\t// Second phase\n\t\tvar f\t= EDT_f\n\t\tvar Sep\t= EDT_Sep\n\t\tvar dt\t= new Array(m*n)\n\t\tvar s\t= new Array(m)\n\t\tvar t\t= new Array(m)\n\t\tvar q\t= 0\n\t\tvar w\n\t\tfor (var y=0; y<n; y++)\t{\n\t\t\tq = 0\n\t\t\ts[0] = 0\n\t\t\tt[0] = 0\n\t\t\t\n\t\t\t// Scan 3\n\t\t\tfor (var u=1; u<m; u++)\t{\n\t\t\t\twhile (q >= 0 && f(t[q], s[q], g[s[q]+y*m]) > f(t[q], u, g[u+y*m]))\n\t\t\t\t\tq--\n\t\t\t\tif (q < 0)\t{\n\t\t\t\t\tq = 0\n\t\t\t\t\ts[0] = u\n\t\t\t\t}\telse\t{\n\t\t\t\t\tw = 1 + Sep(s[q], u, g[s[q]+y*m], g[u+y*m])\n\t\t\t\t\tif (w < m)\t{\n\t\t\t\t\t\tq++\n\t\t\t\t\t\ts[q] = u\n\t\t\t\t\t\tt[q] = w\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Scan 4\n\t\t\tfor (u=m-1; u>=0; u--)\t{\n\t\t\t\tvar d = f(u, s[q], g[s[q]+y*m])\n\t\t\t\tif (method == 'EDT')\t\t\n\t\t\t\t\td = /*Math.floor*/(Math.sqrt(d))\n\t\t\t\tdt[u+y*m] = d\n\t\t\t\tif (u == t[q])\n\t\t\t\t\tq--\n\t\t\t}\n\t\t}\n\t\treturn dt\n\t}\n\n\tlet booleanImage = [];\n\tfor(let i = 0; i < height; i++){\n\t\tfor(let j = 0; j < width; j++){\n\t\t\tbooleanImage.push(cells[i][j].value);\n\t\t}\n\t}\n\tlet dt = distanceFromBooleanImage(booleanImage, width, height, \"EDT\");\n\tfor(let i = 0; i < height; i++){\n\t\tfor(let j = 0; j < width; j++){\n\t\t\tcells[i][j].distance = dt[i * width + j].toFixed(2);\n\t\t}\n\t}\n\n\tlet gameOver = false\n\tlet cleared = 0\n\n\tfunction handleMouseClick(event, i, j){\n\t\tif(gameOver)\n\t\t\treturn;\n\t\tconst cell = cells[i][j]\n\t\tif(!cell.cleared){\n\t\t\tcell.cleared = true;\n\t\t\tcells[i][j] = cell\n\t\t\tcleared++;\n\t\t\tif(cell.value){\n\t\t\t\tgameOver = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet maxDist\n\t$: maxDist = cells.reduce((accum, row) => row.reduce(\n\t\t(accum, cell) => Math.max(accum, cell.distance), accum), 0)\n\n\tfunction cellColor(cell){\n\t\tif(cell.cleared){\n\t\t\tconst value = cell.distance / maxDist * 191 + 63;\n\t\t\treturn `rgb(255, ${value}, ${value})`;\n\t\t}\n\t\telse\n\t\t\treturn \"rgb(127,127,127\";\n\t}\n</script>\n\n<h1>EDT sweeper in Svelte</h1>\n\nCleared cells: {cleared}\n\n<div style=\"position: relative\">\n\t{#each cells as row, i}\n\t\t{#each row as cell, j}\n\t\t\t<div class=\"cell\" style=\"left: {j * 30}px; top: {i * 30}px; width: 30px; height: 30px; background-color: {cellColor(cell)}\"\n\t\t\ton:mousedown=\"{(event) => handleMouseClick(event, i, j)}\">\n\t\t\t\t{cell.cleared ? cell.distance : \"\"}\n\t\t\t</div>\n\t\t{/each}\n\t{/each}\n\t{#if gameOver}\n\t<div class=\"message\">\n\t\tGAME OVER\n\t</div>\n\t{/if}\n</div>\n\n<style>\n\t.cell{\n\t\ttext-align: center;\n\t\tposition: absolute;\n\t\tborder: solid 1px black;\n\t\tfont-size: 7pt;\n\t}\n\n\t.message{\n\t\tfont-size: 30pt;\n\t\tcolor: red;\n\t\ttext-align: center;\n\t\tposition: absolute;\n\t\tleft: 0px;\n\t\ttop: 0px;\n\t\tright: 300px;\n\t\tbottom: 300px;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAwLC,oBAAK,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CACvB,SAAS,CAAE,GAAG,AACf,CAAC,AAED,uBAAQ,CAAC,AACR,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,MAAM,CAClB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACd,CAAC"
}