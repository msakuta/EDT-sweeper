{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { distanceFromBooleanImage } from \"./distanceTransform\"\n\tconst INF = 1e20\n\tconst width = 10\n\tconst height = 10\n\tlet cells = []\n\tlet numMines = 0;\n\tfor(let i = 0; i < height; i++){\n\t\tlet row = []\n\t\tfor(let j = 0; j < width; j++){\n\t\t\tconst occupied = Math.random() < 0.07\n\t\t\trow.push({\n\t\t\t\tvalue: occupied ? 1 : 0,\n\t\t\t\tcleared: false,\n\t\t\t\tdistance: occupied ? INF : 0,\n\t\t\t})\n\t\t\tif(occupied)\n\t\t\t\tnumMines++;\n\t\t}\n\t\tcells.push(row)\n\t}\n\n\tlet booleanImage = [];\n\tfor(let i = 0; i < height; i++){\n\t\tfor(let j = 0; j < width; j++){\n\t\t\tbooleanImage.push(cells[i][j].value);\n\t\t}\n\t}\n\tlet dt = distanceFromBooleanImage(booleanImage, width, height, \"EDT\");\n\tfor(let i = 0; i < height; i++){\n\t\tfor(let j = 0; j < width; j++){\n\t\t\tcells[i][j].distance = dt[i * width + j].toFixed(2);\n\t\t}\n\t}\n\n\tlet gameOver = false\n\tlet numCleared = 0\n\n\tfunction clearCell(i, j){\n\t\tconst neighbors = [[-1,0], [0,-1], [1,0], [0,1]];\n\t\tfor(const neighbor of neighbors){\n\t\t\tconst [i2, j2] = [i + neighbor[0], j + neighbor[1]];\n\t\t\tif(i2 < 0 || height <= i2 || j2 < 0 || width <= j2)\n\t\t\t\tcontinue;\n\t\t\tconst cell = cells[i2][j2];\n\t\t\tif(!cell.cleared && 3 < cell.distance){\n\t\t\t\tcell.cleared = true;\n\t\t\t\tnumCleared++;\n\t\t\t\t// Don't need assignment trigger since the caller already does that\n\t\t\t\t// cells[i2][j2] = cell;\n\t\t\t\tclearCell(i2, j2);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction handleMouseClick(event, i, j){\n\t\tif(gameOver)\n\t\t\treturn;\n\t\tconst cell = cells[i][j]\n\t\tif(!cell.cleared){\n\t\t\tcell.cleared = true;\n\t\t\tcells[i][j] = cell;\n\t\t\tclearCell(i, j);\n\t\t\tnumCleared++;\n\t\t\tif(cell.value){\n\t\t\t\tgameOver = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet maxDist\n\t$: maxDist = cells.reduce((accum, row) => row.reduce(\n\t\t(accum, cell) => Math.max(accum, cell.distance), accum), 0)\n\n\tfunction cellColor(cell){\n\t\tif(cell.cleared){\n\t\t\tconst value = cell.distance / maxDist * 191 + 63;\n\t\t\treturn `rgb(255, ${value}, ${value})`;\n\t\t}\n\t\telse\n\t\t\treturn \"rgb(127,127,127)\";\n\t}\n\n\tlet cleared\n\t$: cleared = width * height - numCleared === numMines\n</script>\n\n<h1>EDT sweeper in Svelte</h1>\n\nCleared cells: {numCleared} / {width * height - numMines} Mines: {numMines}\n\n<div style=\"position: relative; text-align: center; height: {height * 30}px\">\n\t{#each cells as row, i}\n\t\t{#each row as cell, j}\n\t\t\t<div class=\"cell\" style=\"left: {j * 30}px; top: {i * 30}px; width: 30px; height: 30px; background-color: {cellColor(cell)}\"\n\t\t\ton:mousedown=\"{(event) => handleMouseClick(event, i, j)}\">\n\t\t\t\t{cell.cleared ? cell.distance : \"\"}\n\t\t\t</div>\n\t\t{/each}\n\t{/each}\n\t{#if gameOver}\n\t<div class=\"message red\">\n\t\tGAME OVER\n\t</div>\n\t{/if}\n\t{#if cleared}\n\t<div class=\"message green\">\n\t\tGAME CLEAR\n\t</div>\n\t{/if}\n</div>\n\n<hr>\n<div style=\"text-align: center\">Powered by \n\t<a href=\"https://github.com/sveltejs/svelte\">Svelte</a>\n</div>\n\n<style>\n\t.cell{\n\t\ttext-align: center;\n\t\tposition: absolute;\n\t\tborder: solid 1px black;\n\t\tfont-size: 7pt;\n\t}\n\n\t.message{\n\t\tfont-size: 30pt;\n\t\ttext-align: center;\n\t\tposition: absolute;\n\t\tleft: 0px;\n\t\ttop: 0px;\n\t\tright: 300px;\n\t\tbottom: 300px;\n\t}\n\n\t.message.red{\n\t\tcolor: red;\n\t}\n\n\t.message.green{\n\t\tcolor: green;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAsHC,mBAAK,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CACvB,SAAS,CAAE,GAAG,AACf,CAAC,AAED,sBAAQ,CAAC,AACR,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,CAClB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACd,CAAC,AAED,QAAQ,kBAAI,CAAC,AACZ,KAAK,CAAE,GAAG,AACX,CAAC,AAED,QAAQ,oBAAM,CAAC,AACd,KAAK,CAAE,KAAK,AACb,CAAC"
}